<?php
/**
 * @file
 * Code for the Stanford Pingdom Dashboard Connector module.
 */

/**
 * Implements hook_menu().
 */
function stanford_pingdash_menu() {
  $items['admin/config/services/pingdomapi/stanford-dashboard-refresh'] = array(
    'title' => 'Refresh Dashboard Information from Pingdom',
    'type' => MENU_CALLBACK,
    'page callback' => '_stanford_pingdash_refresh',
    'access arguments' =>  array('get pingdom check list'),
  );
  // admin/config/services/pingdomapi/pause-monitoring/(true|false)/<checkid>
  $items['admin/config/services/pingdomapi/pause-monitoring/%/%'] = array(
    'title' => 'Pause Pingdom Check',
    'type' => MENU_CALLBACK,
    'page callback' => '_stanford_pingdash_pause_toggle',
    'access arguments' =>  array('pause pingdom checks'),
    'page arguments' => array(5,6),
  );
  return $items;

}

/**
 * Implements hook_cron().
 */
function stanford_pingdash_cron() {
  stanford_pingdash_update_nodes();
}

/**
 * Populate the stanford_pingdash_nid table with a map of nids and Pingdom check_ids.
 */
function stanford_pingdash_update_map() {
  $checks = pingdom_api_wsclient_get_check_list();
  $checks = $checks['checks'];
  foreach ($checks as $check) {
    $check_id = $check['id'];
    // maps to field_s_site_id
    // $nid = select entity_id from field_data_field_s_site_id where field_s_site_id_value == $check_id
    $query = db_select('field_data_field_s_site_id', 's')
    ->fields('s', array('entity_id'))
    ->condition('field_s_site_id_value', $check_id, '=')
    ->execute();
    $nid = $query->fetchAssoc();
    // db_merge stanford_pingdash_nid set nid = $nid where check_id = $check_id
    if(is_int($nid)) {
      $result = db_merge('stanford_pingdash_nid')
      ->key(array('nid' => $nid))
      ->fields(array(
        'check_id' => $check_id,
        'nid' => $nid,
      ))
      ->execute();
    }
  }
}

/**
 * Update the nodes.
 */
function stanford_pingdash_update_nodes() {
  $checks = pingdom_api_wsclient_get_check_list();
  $checks = $checks['checks'];
  foreach ($checks as $check) {
    $check_id = $check['id'];
    // Load the node that corresponds with the given check ID.
    // See https://www.drupal.org/node/1343708.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'stanford_dashboard_site')
      ->fieldCondition('field_s_site_id', 'value', $check_id, '=');
    $result = $query->execute();
    // There should be only one node with the given check_id
    if((isset($result['node'])) && (count($result['node']) == 1)) {
      // We can rely on the array key being the nid?
      reset($result['node']);
      $nid = key($result['node']);
      $node = node_load($nid);
      // There should only be one term with this name in the vocabulary
      $term = taxonomy_get_term_by_name($check['status'], 'stanford_dashboard_site_status');
      if(count($term) == 1) {
        // We can rely on the array key being the term id?
        reset($term);
        $tid = key($term);
        $node->field_s_site_status[LANGUAGE_NONE][0]['tid'] = $tid;
        $node->field_s_site_response_time[LANGUAGE_NONE][0]['value'] = $check['lastresponsetime'];
        $node->field_s_site_last_test_time[LANGUAGE_NONE][0]['value'] = $check['lasttesttime'];
        node_save($node);
      }
    }
  }
  watchdog('stanford_pingdash', t("Updated site information from Pingdom."));
}

/**
 * Wrapper function for refresh menu callback.
 */
function _stanford_pingdash_refresh() {
  stanford_pingdash_update_nodes();
  drupal_set_message(t("Updated site information from Pingdom."));
  drupal_goto('admin/config/services/pingdomapi');
}

/**
 * Wrapper function for pause menu callback.
 */
function _stanford_pingdash_pause_toggle($pause, $checkid) {
  pingdom_api_wsclient_modify_multiple_checks($pause, 1, $checkid);
  if($pause == "true") {
    drupal_set_message(t("Paused site monitoring."));
  }
  elseif($pause == "false") {
    drupal_set_message(t("Un-paused site monitoring."));
  }
  drupal_goto('admin/config/services/pingdomapi');
}